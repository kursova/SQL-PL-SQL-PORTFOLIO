{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c090a4ca",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:45.233820Z",
     "iopub.status.busy": "2024-08-01T12:49:45.232597Z",
     "iopub.status.idle": "2024-08-01T12:49:46.192590Z",
     "shell.execute_reply": "2024-08-01T12:49:46.191317Z"
    },
    "papermill": {
     "duration": 0.97186,
     "end_time": "2024-08-01T12:49:46.195392",
     "exception": false,
     "start_time": "2024-08-01T12:49:45.223532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "08116399",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:46.213343Z",
     "iopub.status.busy": "2024-08-01T12:49:46.212857Z",
     "iopub.status.idle": "2024-08-01T12:49:46.218285Z",
     "shell.execute_reply": "2024-08-01T12:49:46.217136Z"
    },
    "papermill": {
     "duration": 0.017331,
     "end_time": "2024-08-01T12:49:46.220924",
     "exception": false,
     "start_time": "2024-08-01T12:49:46.203593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e1b7070a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:46.236326Z",
     "iopub.status.busy": "2024-08-01T12:49:46.235958Z",
     "iopub.status.idle": "2024-08-01T12:49:46.248878Z",
     "shell.execute_reply": "2024-08-01T12:49:46.247618Z"
    },
    "papermill": {
     "duration": 0.023479,
     "end_time": "2024-08-01T12:49:46.251327",
     "exception": false,
     "start_time": "2024-08-01T12:49:46.227848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40.41"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "populasyon=np.random.randint(0,80,10000)\n",
    "populasyon[0:10]\n",
    "np.random.seed(10) #yapılacka işlemlerin her seferinde aynı sonucu vermesini sağlar\n",
    "orneklem=np.random.choice(a=populasyon, size=100) # populasyondan rasgele 100 değer seçip örneklem oluşturduk\n",
    "orneklem.mean() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ee0c1d8",
   "metadata": {
    "papermill": {
     "duration": 0.006786,
     "end_time": "2024-08-01T12:49:46.265036",
     "exception": false,
     "start_time": "2024-08-01T12:49:46.258250",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Betimsel istatistikler**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9181c61e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:46.281149Z",
     "iopub.status.busy": "2024-08-01T12:49:46.280764Z",
     "iopub.status.idle": "2024-08-01T12:49:46.286642Z",
     "shell.execute_reply": "2024-08-01T12:49:46.285035Z"
    },
    "papermill": {
     "duration": 0.016978,
     "end_time": "2024-08-01T12:49:46.289332",
     "exception": false,
     "start_time": "2024-08-01T12:49:46.272354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#örneklem dağılımı ise : yukarıdaki gibi populasyon içerisindne 10 tane daha örneklem çektiğimizi ve bunların hepsinin hem kendi içinde hem de tamamının ortalamasını\n",
    "#aldığımızda populasyona yaklaşacaktır. buna merkezi limit teoremi denir. merkezi limit teoremine göre başlangıçtaki değişkenin dağılımı ne olursa olsun yaklaşık olarak normal \n",
    "#dağılıma yansır. \n",
    "\n",
    "#varyans: ortalama etrafındaki dağılımın ölçüsü\n",
    "#kovaryans: iki değişken arasındaki ilişkinin değişkenlik ölçüsü\n",
    "#korelasyon: iki değişken arasındaki ilişkiyi, ilişkinin anlamlı olup olmadığını, ilişkinin şiddetibi ve yönünü ifade eden istatistiksel bir tekniktir. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "847a6795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:46.305662Z",
     "iopub.status.busy": "2024-08-01T12:49:46.305243Z",
     "iopub.status.idle": "2024-08-01T12:49:48.501088Z",
     "shell.execute_reply": "2024-08-01T12:49:48.499638Z"
    },
    "papermill": {
     "duration": 2.207493,
     "end_time": "2024-08-01T12:49:48.503876",
     "exception": false,
     "start_time": "2024-08-01T12:49:46.296383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.01</td>\n",
       "      <td>3.50</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23.68</td>\n",
       "      <td>3.31</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.59</td>\n",
       "      <td>3.61</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill   tip     sex smoker  day    time  size\n",
       "0       16.99  1.01  Female     No  Sun  Dinner     2\n",
       "1       10.34  1.66    Male     No  Sun  Dinner     3\n",
       "2       21.01  3.50    Male     No  Sun  Dinner     3\n",
       "3       23.68  3.31    Male     No  Sun  Dinner     2\n",
       "4       24.59  3.61  Female     No  Sun  Dinner     4"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns \n",
    "tips=sns.load_dataset(\"tips\")\n",
    "df=tips.copy()\n",
    "tips.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2f5cf0cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:48.520635Z",
     "iopub.status.busy": "2024-08-01T12:49:48.520260Z",
     "iopub.status.idle": "2024-08-01T12:49:48.547266Z",
     "shell.execute_reply": "2024-08-01T12:49:48.546133Z"
    },
    "papermill": {
     "duration": 0.038156,
     "end_time": "2024-08-01T12:49:48.549879",
     "exception": false,
     "start_time": "2024-08-01T12:49:48.511723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>total_bill</th>\n",
       "      <td>244.0</td>\n",
       "      <td>19.785943</td>\n",
       "      <td>8.902412</td>\n",
       "      <td>3.07</td>\n",
       "      <td>13.3475</td>\n",
       "      <td>17.795</td>\n",
       "      <td>24.1275</td>\n",
       "      <td>50.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tip</th>\n",
       "      <td>244.0</td>\n",
       "      <td>2.998279</td>\n",
       "      <td>1.383638</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>2.900</td>\n",
       "      <td>3.5625</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>size</th>\n",
       "      <td>244.0</td>\n",
       "      <td>2.569672</td>\n",
       "      <td>0.951100</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>6.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            count       mean       std   min      25%     50%      75%    max\n",
       "total_bill  244.0  19.785943  8.902412  3.07  13.3475  17.795  24.1275  50.81\n",
       "tip         244.0   2.998279  1.383638  1.00   2.0000   2.900   3.5625  10.00\n",
       "size        244.0   2.569672  0.951100  1.00   2.0000   2.000   3.0000   6.00"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb68ead6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:49:48.567966Z",
     "iopub.status.busy": "2024-08-01T12:49:48.567515Z",
     "iopub.status.idle": "2024-08-01T12:50:04.104958Z",
     "shell.execute_reply": "2024-08-01T12:50:04.103680Z"
    },
    "papermill": {
     "duration": 15.551028,
     "end_time": "2024-08-01T12:50:04.108257",
     "exception": false,
     "start_time": "2024-08-01T12:49:48.557229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting researchpy\r\n",
      "  Downloading researchpy-0.3.6-py3-none-any.whl.metadata (1.2 kB)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from researchpy) (1.11.4)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from researchpy) (1.26.4)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from researchpy) (2.2.2)\r\n",
      "Requirement already satisfied: statsmodels in /opt/conda/lib/python3.10/site-packages (from researchpy) (0.14.1)\r\n",
      "Requirement already satisfied: patsy in /opt/conda/lib/python3.10/site-packages (from researchpy) (0.5.6)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->researchpy) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->researchpy) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->researchpy) (2023.4)\r\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from patsy->researchpy) (1.16.0)\r\n",
      "Requirement already satisfied: packaging>=21.3 in /opt/conda/lib/python3.10/site-packages (from statsmodels->researchpy) (21.3)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=21.3->statsmodels->researchpy) (3.1.1)\r\n",
      "Downloading researchpy-0.3.6-py3-none-any.whl (34 kB)\r\n",
      "Installing collected packages: researchpy\r\n",
      "Successfully installed researchpy-0.3.6\r\n"
     ]
    }
   ],
   "source": [
    "!pip install researchpy\n",
    "import researchpy as rp # bu kütüphanede de betimsel istatistik için kullanacağımız kodlar var. describe işlemine göre daha detaylı olduğu için bunu indirdik."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9fd21539",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.127978Z",
     "iopub.status.busy": "2024-08-01T12:50:04.126626Z",
     "iopub.status.idle": "2024-08-01T12:50:04.172936Z",
     "shell.execute_reply": "2024-08-01T12:50:04.171371Z"
    },
    "papermill": {
     "duration": 0.058776,
     "end_time": "2024-08-01T12:50:04.175413",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.116637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/researchpy/summary.py:102: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value 'total_bill' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n",
      "  table_a.iloc[0,0] = ix\n",
      "/opt/conda/lib/python3.10/site-packages/researchpy/summary.py:102: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value 'tip' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n",
      "  table_a.iloc[0,0] = ix\n",
      "/opt/conda/lib/python3.10/site-packages/researchpy/summary.py:102: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value 'size' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n",
      "  table_a.iloc[0,0] = ix\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>N</th>\n",
       "      <th>Mean</th>\n",
       "      <th>SD</th>\n",
       "      <th>SE</th>\n",
       "      <th>95% Conf.</th>\n",
       "      <th>Interval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>total_bill</td>\n",
       "      <td>244.0</td>\n",
       "      <td>19.7859</td>\n",
       "      <td>8.9024</td>\n",
       "      <td>0.5699</td>\n",
       "      <td>18.6633</td>\n",
       "      <td>20.9086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tip</td>\n",
       "      <td>244.0</td>\n",
       "      <td>2.9983</td>\n",
       "      <td>1.3836</td>\n",
       "      <td>0.0886</td>\n",
       "      <td>2.8238</td>\n",
       "      <td>3.1728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>size</td>\n",
       "      <td>244.0</td>\n",
       "      <td>2.5697</td>\n",
       "      <td>0.9511</td>\n",
       "      <td>0.0609</td>\n",
       "      <td>2.4497</td>\n",
       "      <td>2.6896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Variable      N     Mean      SD      SE  95% Conf.  Interval\n",
       "0  total_bill  244.0  19.7859  8.9024  0.5699    18.6633   20.9086\n",
       "1         tip  244.0   2.9983  1.3836  0.0886     2.8238    3.1728\n",
       "2        size  244.0   2.5697  0.9511  0.0609     2.4497    2.6896"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rp.summary_cont(df[[\"total_bill\", \"tip\", \"size\"]]) # sayısal değerler için çalıştırdık. sd, se güven aralığı gibi diğerinde olmayan bilgiler var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f2ae1d2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.194086Z",
     "iopub.status.busy": "2024-08-01T12:50:04.193665Z",
     "iopub.status.idle": "2024-08-01T12:50:04.226650Z",
     "shell.execute_reply": "2024-08-01T12:50:04.225525Z"
    },
    "papermill": {
     "duration": 0.045327,
     "end_time": "2024-08-01T12:50:04.229304",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.183977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>Outcome</th>\n",
       "      <th>Count</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>sex</td>\n",
       "      <td>Male</td>\n",
       "      <td>157</td>\n",
       "      <td>64.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>87</td>\n",
       "      <td>35.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>smoker</td>\n",
       "      <td>No</td>\n",
       "      <td>151</td>\n",
       "      <td>61.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Yes</td>\n",
       "      <td>93</td>\n",
       "      <td>38.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>day</td>\n",
       "      <td>Sat</td>\n",
       "      <td>87</td>\n",
       "      <td>35.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td></td>\n",
       "      <td>Sun</td>\n",
       "      <td>76</td>\n",
       "      <td>31.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td></td>\n",
       "      <td>Thur</td>\n",
       "      <td>62</td>\n",
       "      <td>25.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td></td>\n",
       "      <td>Fri</td>\n",
       "      <td>19</td>\n",
       "      <td>7.79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Variable Outcome  Count  Percent\n",
       "0      sex    Male    157    64.34\n",
       "1           Female     87    35.66\n",
       "2   smoker      No    151    61.89\n",
       "3              Yes     93    38.11\n",
       "4      day     Sat     87    35.66\n",
       "5              Sun     76    31.15\n",
       "6             Thur     62    25.41\n",
       "7              Fri     19     7.79"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rp.summary_cat(df[[\"sex\", \"smoker\", \"day\"]]) # bunlar da kategorik değişkenler "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "78537b86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.248850Z",
     "iopub.status.busy": "2024-08-01T12:50:04.248407Z",
     "iopub.status.idle": "2024-08-01T12:50:04.262430Z",
     "shell.execute_reply": "2024-08-01T12:50:04.261230Z"
    },
    "papermill": {
     "duration": 0.026533,
     "end_time": "2024-08-01T12:50:04.264876",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.238343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tip</th>\n",
       "      <th>total_bill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tip</th>\n",
       "      <td>1.914455</td>\n",
       "      <td>8.323502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_bill</th>\n",
       "      <td>8.323502</td>\n",
       "      <td>79.252939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 tip  total_bill\n",
       "tip         1.914455    8.323502\n",
       "total_bill  8.323502   79.252939"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"tip\", \"total_bill\"]].cov() #kovaryans -- aralarında pozitif bir ilişki var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "45bb3717",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.284851Z",
     "iopub.status.busy": "2024-08-01T12:50:04.283655Z",
     "iopub.status.idle": "2024-08-01T12:50:04.298736Z",
     "shell.execute_reply": "2024-08-01T12:50:04.297636Z"
    },
    "papermill": {
     "duration": 0.027601,
     "end_time": "2024-08-01T12:50:04.301149",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.273548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tip</th>\n",
       "      <th>total_bill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tip</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.675734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_bill</th>\n",
       "      <td>0.675734</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 tip  total_bill\n",
       "tip         1.000000    0.675734\n",
       "total_bill  0.675734    1.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"tip\", \"total_bill\"]].corr() #korelasyon aralarındaki ilişkinin şiddeti diyebiliriz sanırım (yi ne de ayrıca bir bak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dc5def01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.320964Z",
     "iopub.status.busy": "2024-08-01T12:50:04.320567Z",
     "iopub.status.idle": "2024-08-01T12:50:04.325982Z",
     "shell.execute_reply": "2024-08-01T12:50:04.324805Z"
    },
    "papermill": {
     "duration": 0.017989,
     "end_time": "2024-08-01T12:50:04.328495",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.310506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "fiyatlar=np.random.randint(10,110,1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "166875f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.349319Z",
     "iopub.status.busy": "2024-08-01T12:50:04.348263Z",
     "iopub.status.idle": "2024-08-01T12:50:04.355971Z",
     "shell.execute_reply": "2024-08-01T12:50:04.354737Z"
    },
    "papermill": {
     "duration": 0.020943,
     "end_time": "2024-08-01T12:50:04.358402",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.337459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "59.408"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fiyatlar.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5f952a9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.380036Z",
     "iopub.status.busy": "2024-08-01T12:50:04.378885Z",
     "iopub.status.idle": "2024-08-01T12:50:04.780996Z",
     "shell.execute_reply": "2024-08-01T12:50:04.779818Z"
    },
    "papermill": {
     "duration": 0.415696,
     "end_time": "2024-08-01T12:50:04.783715",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.368019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import statsmodels.stats.api as sms  #güven aralığı için indirmemiz gereken kütüphane "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cad8965e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.804100Z",
     "iopub.status.busy": "2024-08-01T12:50:04.803011Z",
     "iopub.status.idle": "2024-08-01T12:50:04.811424Z",
     "shell.execute_reply": "2024-08-01T12:50:04.810083Z"
    },
    "papermill": {
     "duration": 0.020911,
     "end_time": "2024-08-01T12:50:04.813801",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.792890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57.590281113644565, 61.22571888635544)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sms.DescrStatsW(fiyatlar).tconfint_mean() #satıcıların %95'inin satın alma aralığı tconfint_mean:ağırlıklı ortalama için \n",
    "#güven aralığını hesaplar "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01bbe75f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.834646Z",
     "iopub.status.busy": "2024-08-01T12:50:04.833626Z",
     "iopub.status.idle": "2024-08-01T12:50:04.839201Z",
     "shell.execute_reply": "2024-08-01T12:50:04.837857Z"
    },
    "papermill": {
     "duration": 0.018322,
     "end_time": "2024-08-01T12:50:04.841592",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.823270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#rassal değişken: değerlerini bir deneyin sonucundan alan değişkene denir. yazı tura buna örnek "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "98fc30e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.861449Z",
     "iopub.status.busy": "2024-08-01T12:50:04.861063Z",
     "iopub.status.idle": "2024-08-01T12:50:04.866223Z",
     "shell.execute_reply": "2024-08-01T12:50:04.864938Z"
    },
    "papermill": {
     "duration": 0.018139,
     "end_time": "2024-08-01T12:50:04.868802",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.850663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#bernoulli dağılımı: kesikli bir dağılımdır. 2 sonuçludur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "512717ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.890011Z",
     "iopub.status.busy": "2024-08-01T12:50:04.888806Z",
     "iopub.status.idle": "2024-08-01T12:50:04.894256Z",
     "shell.execute_reply": "2024-08-01T12:50:04.893125Z"
    },
    "papermill": {
     "duration": 0.018603,
     "end_time": "2024-08-01T12:50:04.896651",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.878048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy.stats import bernoulli #olasılık işlemleri için scipy kütüphanesini kullanıyoruz. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "29cd23ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.916572Z",
     "iopub.status.busy": "2024-08-01T12:50:04.916183Z",
     "iopub.status.idle": "2024-08-01T12:50:04.921850Z",
     "shell.execute_reply": "2024-08-01T12:50:04.920665Z"
    },
    "papermill": {
     "duration": 0.018444,
     "end_time": "2024-08-01T12:50:04.924310",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.905866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "p=0.6 #yazı gelme olasılığı dersek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e1d2cfa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.944700Z",
     "iopub.status.busy": "2024-08-01T12:50:04.944296Z",
     "iopub.status.idle": "2024-08-01T12:50:04.953943Z",
     "shell.execute_reply": "2024-08-01T12:50:04.952822Z"
    },
    "papermill": {
     "duration": 0.02284,
     "end_time": "2024-08-01T12:50:04.956330",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.933490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4000000000000001"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rv=bernoulli(p)\n",
    "rv.pmf(k=1)  #yazı gelme olasılığı pmf=probabilty mass function \n",
    "rv.pmf(k=0) #tura gelme olasılığı"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "beb0636d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:04.976829Z",
     "iopub.status.busy": "2024-08-01T12:50:04.976049Z",
     "iopub.status.idle": "2024-08-01T12:50:05.005394Z",
     "shell.execute_reply": "2024-08-01T12:50:05.004074Z"
    },
    "papermill": {
     "duration": 0.042705,
     "end_time": "2024-08-01T12:50:05.008265",
     "exception": false,
     "start_time": "2024-08-01T12:50:04.965560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Atış Sayısı: 2 --- Yazı Olasılığı: 50.00\n",
      "Atış Sayısı: 4 --- Yazı Olasılığı: 0.00\n",
      "Atış Sayısı: 8 --- Yazı Olasılığı: 62.50\n",
      "Atış Sayısı: 16 --- Yazı Olasılığı: 43.75\n",
      "Atış Sayısı: 32 --- Yazı Olasılığı: 46.88\n",
      "Atış Sayısı: 64 --- Yazı Olasılığı: 56.25\n",
      "Atış Sayısı: 128 --- Yazı Olasılığı: 50.78\n",
      "Atış Sayısı: 256 --- Yazı Olasılığı: 52.73\n",
      "Atış Sayısı: 512 --- Yazı Olasılığı: 52.93\n",
      "Atış Sayısı: 1024 --- Yazı Olasılığı: 50.20\n",
      "Atış Sayısı: 2048 --- Yazı Olasılığı: 48.58\n",
      "Atış Sayısı: 4096 --- Yazı Olasılığı: 49.49\n",
      "Atış Sayısı: 8192 --- Yazı Olasılığı: 49.58\n",
      "Atış Sayısı: 16384 --- Yazı Olasılığı: 49.96\n",
      "Atış Sayısı: 32768 --- Yazı Olasılığı: 50.00\n",
      "Atış Sayısı: 65536 --- Yazı Olasılığı: 49.68\n",
      "Atış Sayısı: 131072 --- Yazı Olasılığı: 49.97\n",
      "Atış Sayısı: 262144 --- Yazı Olasılığı: 50.13\n",
      "Atış Sayısı: 524288 --- Yazı Olasılığı: 50.01\n",
      "Atış Sayısı: 1048576 --- Yazı Olasılığı: 50.09\n"
     ]
    }
   ],
   "source": [
    "#büyük sayılar yasası : bir rassal değişkenin uzun vadeli kararlılığını tanımlayan olasılık teoremi\n",
    "\n",
    "import numpy as np\n",
    "rng=np.random.RandomState(123)\n",
    "for i in np.arange(1,21):\n",
    "    deney_sayisi=2**i\n",
    "    yazi_turalar=rng.randint(0,2,size=deney_sayisi)\n",
    "    yazi_olasiliklari=np.mean(yazi_turalar)\n",
    "    print(\"Atış Sayısı:\" , deney_sayisi, \"---\", 'Yazı Olasılığı: %.2f' % (yazi_olasiliklari * 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f79c12b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.029402Z",
     "iopub.status.busy": "2024-08-01T12:50:05.029021Z",
     "iopub.status.idle": "2024-08-01T12:50:05.034224Z",
     "shell.execute_reply": "2024-08-01T12:50:05.032776Z"
    },
    "papermill": {
     "duration": 0.01875,
     "end_time": "2024-08-01T12:50:05.036820",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.018070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#binom dağılımı : bağımsız n deneme sonucu k başarılı olma olasılığı ile ilgilenildiğinde kullanılan dağılımdır.\n",
    "#bir madeni para 4 kez atılıyor.\n",
    "#2  kere yazı gelmesi olasılığı nedir? gibi soruları bu dağılım ile buluruz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b44f0ec4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.057269Z",
     "iopub.status.busy": "2024-08-01T12:50:05.056884Z",
     "iopub.status.idle": "2024-08-01T12:50:05.062042Z",
     "shell.execute_reply": "2024-08-01T12:50:05.060874Z"
    },
    "papermill": {
     "duration": 0.018341,
     "end_time": "2024-08-01T12:50:05.064566",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.046225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy.stats import binom "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bd13ba6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.084981Z",
     "iopub.status.busy": "2024-08-01T12:50:05.084576Z",
     "iopub.status.idle": "2024-08-01T12:50:05.093250Z",
     "shell.execute_reply": "2024-08-01T12:50:05.091881Z"
    },
    "papermill": {
     "duration": 0.021891,
     "end_time": "2024-08-01T12:50:05.095909",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.074018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.36972963764972666\n",
      "0.002897787123761478\n",
      "7.006035693977194e-08\n"
     ]
    }
   ],
   "source": [
    "#örnek: bir reklamın tıklanma olasılığı 0.1 olsun\n",
    "#100 denemede bu reklamın 1,5 ve 10 kişi tarafından tıklanma olasılığı nedir?\n",
    "\n",
    "p=0.01\n",
    "n=100\n",
    "rv=binom(n,p)\n",
    "print(rv.pmf(1))\n",
    "print(rv.pmf(5))\n",
    "print(rv.pmf(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "29b8a537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.117232Z",
     "iopub.status.busy": "2024-08-01T12:50:05.116745Z",
     "iopub.status.idle": "2024-08-01T12:50:05.121880Z",
     "shell.execute_reply": "2024-08-01T12:50:05.120684Z"
    },
    "papermill": {
     "duration": 0.01838,
     "end_time": "2024-08-01T12:50:05.124365",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.105985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#poisson dağılımı : belirli bir zaman aralığında belirli bir alanda nadiren rastlanılan olayların olasılığı . binom dağılımının özel bir halidir. rassal değişkenler 2 sonuçlku olmalıdır.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7282965d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.146027Z",
     "iopub.status.busy": "2024-08-01T12:50:05.145628Z",
     "iopub.status.idle": "2024-08-01T12:50:05.151117Z",
     "shell.execute_reply": "2024-08-01T12:50:05.149747Z"
    },
    "papermill": {
     "duration": 0.019423,
     "end_time": "2024-08-01T12:50:05.153774",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.134351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from scipy.stats import poisson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f848d651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.175358Z",
     "iopub.status.busy": "2024-08-01T12:50:05.174606Z",
     "iopub.status.idle": "2024-08-01T12:50:05.180263Z",
     "shell.execute_reply": "2024-08-01T12:50:05.178963Z"
    },
    "papermill": {
     "duration": 0.01944,
     "end_time": "2024-08-01T12:50:05.182832",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.163392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lambda_=0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2f367998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-01T12:50:05.203991Z",
     "iopub.status.busy": "2024-08-01T12:50:05.203586Z",
     "iopub.status.idle": "2024-08-01T12:50:05.212769Z",
     "shell.execute_reply": "2024-08-01T12:50:05.211607Z"
    },
    "papermill": {
     "duration": 0.022511,
     "end_time": "2024-08-01T12:50:05.215291",
     "exception": false,
     "start_time": "2024-08-01T12:50:05.192780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.09048374180359597"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rv=poisson(mu=lambda_)\n",
    "rv.pmf(k=1) #k "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 24.209125,
   "end_time": "2024-08-01T12:50:05.847294",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-01T12:49:41.638169",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
